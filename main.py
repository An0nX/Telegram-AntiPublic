import sqlite3
import io
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ContentType
import re
import os

directory = 'documents'  # –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã
for root, dirs, files in os.walk(directory):
  for file in files:
    os.remove(os.path.join(root, file))

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '–°–Æ–î–ê–¢–û–ö–ï–ù'

# –ü—É—Ç—å –¥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "antipublic.db"

# SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
CREATE_TABLE_QUERY = """
CREATE TABLE IF NOT EXISTS data (
    email TEXT,
    password TEXT
)
"""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
def create_database():
  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  conn = sqlite3.connect(DB_PATH)
  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
  conn.execute(CREATE_TABLE_QUERY)
  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  conn.close()


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
create_database()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É
  await message.answer(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
    "üíå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π email –∏ –ø–∞—Ä–æ–ª—å, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º ':'\n"
    "üìÅ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å—Ä–∞–∑—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –º–Ω–µ"
    "üìÑ –¢–∞–∫–∂–µ —è –º–æ–≥—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ 20–ú–± (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)"
  )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
@dp.message_handler(content_types=[ContentType.TEXT, ContentType.DOCUMENT])
async def handle_message(message: types.Message):
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  content_type = message.content_type

  # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if content_type == ContentType.TEXT:
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    lines = message.text.split("\n")
  # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
  elif content_type == ContentType.DOCUMENT:
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    document = message.document
    file_name = document.file_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
    if file_name.endswith(".txt"):
      # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      result = await message.document.download()
      file_name = result.name

      # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      with open(file_name, "r") as f:
        lines = f.readlines()
        f.close()

    else:
      # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await message.answer(
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
      return

  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  conn = sqlite3.connect(DB_PATH)
  cursor = conn.cursor()
  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
  unique_lines = set()
  for line in lines:
    email, _, password = line.partition(":")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    count = conn.execute(
      "SELECT COUNT(*) FROM data WHERE email = ? AND password = ?",
      (email.strip(), password.strip())).fetchone()[0]
    if count == 0:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
      if not re.match(r"[^@]+@[^@]+\.[^@]+:[^:]+", line):
        continue
      # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫
      cursor.execute('INSERT INTO data VALUES (?, ?)',
                     (email.strip(), password.strip()))
      unique_lines.add(line.strip())
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  conn.commit()
  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  conn.close()
  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  count = len(unique_lines)
  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  if count > 0:
    await message.answer_document(
      types.InputFile(io.BytesIO("\n".join(unique_lines).encode()),
                      filename="unique_lines.txt"),
      caption=
      f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(lines)} –∑–∞–ø–∏—Å–µ–π\nüí´ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {count}")
  else:
    await message.answer("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π üò¢")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
  from aiogram import executor
  executor.start_polling(dp, skip_updates=True)
